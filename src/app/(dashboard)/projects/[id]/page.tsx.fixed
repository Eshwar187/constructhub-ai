'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { toast } from 'sonner';

interface Project {
  _id: string;
  name: string;
  description: string;
  landArea: number;
  landUnit: string;
  budget: number;
  currency: string;
  location: {
    country: string;
    state: string;
    city: string;
  };
  floorPlan?: string;
  suggestions?: {
    materials: Array<{
      name: string;
      cost: number;
      description: string;
    }>;
    professionals: Array<{
      name: string;
      profession: string;
      contact: string;
      rating: number;
    }>;
  };
  createdAt: string;
  updatedAt: string;
}

export default function ProjectDetailPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const [project, setProject] = useState<Project | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [floorPlanPrompt, setFloorPlanPrompt] = useState('');
  const [isGeneratingFloorPlan, setIsGeneratingFloorPlan] = useState(false);
  const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false);

  useEffect(() => {
    const fetchProject = async () => {
      try {
        const response = await fetch(`/api/projects/${params.id}`);
        if (response.ok) {
          const data = await response.json();
          setProject(data);
        } else {
          toast.error('Failed to fetch project details');
        }
      } catch (error) {
        toast.error('An error occurred while fetching project details');
      } finally {
        setIsLoading(false);
      }
    };

    fetchProject();
  }, [params.id]);

  const generateFloorPlan = async () => {
    if (!floorPlanPrompt) {
      toast.error('Please enter a description for the floor plan');
      return;
    }

    setIsGeneratingFloorPlan(true);

    try {
      const response = await fetch('/api/ai/generate-floor-plan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          projectId: params.id,
          prompt: floorPlanPrompt,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        setProject(prev => prev ? { ...prev, floorPlan: data.floorPlan } : null);
        toast.success('Floor plan generated successfully');
      } else {
        toast.error(data.error || 'Failed to generate floor plan');
      }
    } catch (error) {
      toast.error('An error occurred while generating the floor plan');
    } finally {
      setIsGeneratingFloorPlan(false);
    }
  };

  const getSuggestions = async () => {
    setIsLoadingSuggestions(true);

    try {
      const response = await fetch(`/api/suggestions?projectId=${params.id}`);

      if (response.ok) {
        const data = await response.json();
        setProject(prev => prev ? {
          ...prev,
          suggestions: {
            materials: data.materials,
            professionals: data.professionals,
          }
        } : null);
        toast.success('Suggestions loaded successfully');
      } else {
        const data = await response.json();
        toast.error(data.error || 'Failed to load suggestions');
      }
    } catch (error) {
      toast.error('An error occurred while loading suggestions');
    } finally {
      setIsLoadingSuggestions(false);
    }
  };

  const deleteProject = async () => {
    if (!confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
      return;
    }

    try {
      const response = await fetch(`/api/projects/${params.id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        toast.success('Project deleted successfully');
        router.push('/dashboard');
      } else {
        const data = await response.json();
        toast.error(data.error || 'Failed to delete project');
      }
    } catch (error) {
      toast.error('An error occurred while deleting the project');
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!project) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-bold mb-4">Project Not Found</h2>
        <p className="text-gray-400 mb-6">The project you're looking for doesn't exist or you don't have permission to view it.</p>
        <Button
          onClick={() => router.push('/dashboard')}
          className="bg-blue-600 hover:bg-blue-700"
        >
          Return to Dashboard
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="flex flex-col md:flex-row md:items-center justify-between gap-4"
      >
        <div>
          <h1 className="text-3xl font-bold">{project.name}</h1>
          <p className="text-gray-400 mt-1">Created on {new Date(project.createdAt).toLocaleDateString()}</p>
        </div>
        <Button
          variant="destructive"
          onClick={deleteProject}
          className="bg-red-600 hover:bg-red-700"
        >
          Delete Project
        </Button>
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="bg-gray-800 border-gray-700">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="floor-plan">Floor Plan</TabsTrigger>
            <TabsTrigger value="suggestions">Suggestions</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="mt-6">
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle>Project Details</CardTitle>
                <CardDescription className="text-gray-400">
                  Basic information about your construction project
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Description</h3>
                    <p className="text-gray-300">{project.description}</p>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <h3 className="text-lg font-medium mb-2">Land Area</h3>
                      <p className="text-gray-300">
                        {project.landArea.toLocaleString()} {project.landUnit}
                      </p>
                    </div>

                    <div>
                      <h3 className="text-lg font-medium mb-2">Budget</h3>
                      <p className="text-gray-300">
                        {project.currency} {project.budget.toLocaleString()}
                      </p>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-4">Location</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <p className="text-sm text-gray-400">Country</p>
                      <p className="text-gray-300">{project.location.country}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400">State/Province</p>
                      <p className="text-gray-300">{project.location.state}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400">City</p>
                      <p className="text-gray-300">{project.location.city}</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="floor-plan" className="mt-6">
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle>Floor Plan</CardTitle>
                <CardDescription className="text-gray-400">
                  Generate and view AI-powered floor plans for your project
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {project.floorPlan ? (
                  <div className="space-y-6">
                    <div className="border border-gray-700 rounded-lg overflow-hidden bg-white p-2">
                      <img
                        src={project.floorPlan}
                        alt="Floor Plan"
                        className="w-full h-auto"
                      />
                    </div>
                    <div className="flex items-center justify-between bg-gray-750 p-3 rounded-md">
                      <div>
                        <span className="text-blue-400 font-medium">Land Area:</span> {project.landArea} {project.landUnit}
                      </div>
                      <div className="text-gray-300 text-sm">
                        <span className="bg-blue-900/50 text-blue-300 px-2 py-1 rounded-full">Blueprint</span>
                      </div>
                    </div>

                    <Dialog>
                      <DialogTrigger asChild>
                        <Button className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 shadow-lg shadow-blue-700/20 transition-all duration-300 hover:shadow-blue-700/40">
                          <span className="flex items-center">
                            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Generate New Blueprint
                          </span>
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="bg-gray-800 border-gray-700 text-white">
                        <DialogHeader>
                          <DialogTitle>Generate New Floor Plan</DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4 py-4">
                          <Label htmlFor="prompt">Describe your floor plan</Label>
                          <Input
                            id="prompt"
                            placeholder="e.g., 3 bedrooms, 2 bathrooms, open kitchen, large living room"
                            value={floorPlanPrompt}
                            onChange={(e) => setFloorPlanPrompt(e.target.value)}
                            className="bg-gray-700 border-gray-600 text-white"
                          />
                        </div>
                        <div className="flex justify-end">
                          <Button
                            onClick={generateFloorPlan}
                            disabled={isGeneratingFloorPlan || !floorPlanPrompt}
                            className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 shadow-lg shadow-blue-700/20 transition-all duration-300 hover:shadow-blue-700/40"
                          >
                            {isGeneratingFloorPlan ? (
                              <>
                                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Generating...
                              </>
                            ) : (
                              <>Generate Blueprint</>
                            )}
                          </Button>
                        </div>
                      </DialogContent>
                    </Dialog>
                  </div>
                ) : (
                  <div className="space-y-6">
                    <div className="text-center py-8">
                      <div className="w-24 h-24 mx-auto mb-4 bg-blue-900/20 rounded-full flex items-center justify-center">
                        <svg className="w-12 h-12 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
                        </svg>
                      </div>
                      <p className="text-gray-400 mb-2">
                        No floor plan has been generated yet.
                      </p>
                      <p className="text-gray-500 text-sm mb-6">
                        Generate a professional blueprint based on your land area ({project.landArea} {project.landUnit}) and requirements.
                      </p>
                    </div>
                    <div className="space-y-4">
                      <Label htmlFor="prompt" className="text-blue-400">Describe your floor plan requirements</Label>
                      <Textarea
                        id="prompt"
                        placeholder="e.g., 3 bedrooms, 2 bathrooms, open kitchen, large living room, double garage, patio, etc."
                        value={floorPlanPrompt}
                        onChange={(e) => setFloorPlanPrompt(e.target.value)}
                        className="bg-gray-700 border-gray-600 text-white min-h-[100px]"
                      />
                    </div>
                    <Button
                      onClick={generateFloorPlan}
                      disabled={isGeneratingFloorPlan || !floorPlanPrompt}
                      className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 shadow-lg shadow-blue-700/20 transition-all duration-300 hover:shadow-blue-700/40 w-full"
                    >
                      {isGeneratingFloorPlan ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Generating Blueprint...
                        </>
                      ) : (
                        <>
                          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                          </svg>
                          Generate Blueprint
                        </>
                      )}
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="suggestions" className="mt-6">
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle>Suggestions</CardTitle>
                <CardDescription className="text-gray-400">
                  Get real-time suggestions for materials based on your project details
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {project.suggestions ? (
                  <div className="space-y-8">
                    <div>
                      <h3 className="text-xl font-medium mb-4">Recommended Materials</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {project.suggestions.materials.map((material, index) => (
                          <Card key={index} className="bg-gray-750 border-gray-700">
                            <CardHeader className="pb-2">
                              <CardTitle className="text-lg">{material.name}</CardTitle>
                            </CardHeader>
                            <CardContent>
                              <p className="text-gray-300 mb-2">{material.description}</p>
                              <p className="text-blue-400 font-medium">
                                Estimated Cost: {project.currency} {material.cost.toLocaleString()}
                              </p>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    </div>

                    {/* Local Professionals section removed as requested */}

                    <Button
                      onClick={getSuggestions}
                      disabled={isLoadingSuggestions}
                      className="bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 shadow-lg shadow-blue-700/20 transition-all duration-300 hover:shadow-blue-700/40"
                    >
                      {isLoadingSuggestions ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Refreshing Suggestions...
                        </>
                      ) : (
                        <>
                          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                          </svg>
                          Refresh Suggestions
                        </>
                      )}
                    </Button>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="w-24 h-24 mx-auto mb-4 bg-green-900/20 rounded-full flex items-center justify-center">
                      <svg className="w-12 h-12 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                      </svg>
                    </div>
                    <p className="text-gray-400 mb-2">
                      No material suggestions available yet.
                    </p>
                    <p className="text-gray-500 text-sm mb-6">
                      Get real-time suggestions for materials based on your project details and budget.
                    </p>
                    <Button
                      onClick={getSuggestions}
                      disabled={isLoadingSuggestions}
                      className="bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 shadow-lg shadow-blue-700/20 transition-all duration-300 hover:shadow-blue-700/40 w-full"
                    >
                      {isLoadingSuggestions ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Loading Suggestions...
                        </>
                      ) : (
                        <>
                          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                          </svg>
                          Get Material Suggestions
                        </>
                      )}
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </motion.div>
    </div>
  );
}
